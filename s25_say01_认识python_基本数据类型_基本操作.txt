今日内容概要
	1. python的来源.历史发展(版本)
	2. 如何编写python的程序
	3. 如何编写变量.变量的命名规范
	4. 常量(写法)
	5. 变量的数据类型(int, str, bool)
	6. 用户交互(input)
	7. 流程控制(让程序有不同的方向可以选择)
	8. 循环(while)

内容详细:
	1.python从哪儿来的？
		
	2.python是一门什么样的编程语言
		python是一门解释型，弱类型高级编程语言
		python的程序是通过解释器，逐行的解释执行的。执行的时候必须有源代码, 必须有解释器存在. 执行效率相对于编译型语言是比较慢的. 
		弱类型: 
		
		python的解释器:
			CPython ：  该解释器是由C语言编写。我们学习的就是这个. 官方提供的就是CPython
			IPython :   基于CPython开发的。交互和CPython有一些区别. 
			JPython :   和java平台相关的python解释器
			IronPython: 和.net平台相关的python解释器
			PyPy	:   把python程序一次性进行编译。 然后统一执行.
			
		我们的程序是运行在python解释器上的. python的程序可以无缝跨平台
	
	3. python的历史:
		python2.x。即将被淘汰 
		python3.x。我们学习的重点
	
	4. 第一个python程序
		想编写python程序。 第一件事儿。 安装python解释器
		调出CMD 
		win+r =>  cmd =>回车  =>  python => 回车进入到python的命令行模式
		
		命令行模式写代码。 代码没办法保存。 
		我们需要把代码写在py文件中。 方便后面我想重复的调用这个程序
		
		在命令行中使用python 文件名的形式也可以执行我们的python程序
			python 文件全名称
			
		在文件里写一个python的程序。 然后在cmd运行该程序
		
	
	5. 变量
		变量就是一个可变的值
		变量的本质就是一个符号.负责存储程序运行过程中产生的值. 供给后面的程序使用
		money = 0
		money = 200
		xxxxxx
		money = 100
		xxxxxxxxx
		money = 400
		
		变量的命名规范:
			1. 由数字, 字母, 下划线组成.
			2. 不可以是数字开头, 更不能是纯数字
			3. 不可以使用python的关键字. 关键字(python官方已经使用的名字)
			4. 不要用中文. 
			5. 不要太长. 不容易让人读懂
			6. 区分大小写. 
			7. 要有意义. 
			8. 推荐使用驼峰或者下划线命名
				驼峰: 每个单词的首字母大写
				下划线: 每个单词使用_分开
			
		变量的名字一定要让人能看懂. 
			
	6. 常量
		1. 不变的量 -> 生日, 圆周率
			绝对的常量在python中是不存在的. 一般我们把所有字母大写就认为是常量
		
		2. 直接写一个数字或者写一个值
			
		
	7. 常量和变量能做什么?
		存储
		
		= 表示赋值
		把等号右边的结果赋值给等号左边的变量
		
	8. python基础数据类型简介(int, str, bool)
		int: 整数. 没有小数点
			随便给出一个数字. 就是整数
			
			操作: 
				+
				-
				*
				/ # 又可能不会像你想象的那么完美
				//  整除(商)
				%   计算余数
				
				**  次幂 
		
		str: 字符串, 编程界使用频率最高的一种数据类型
			用双引号括起来的内容
			', ", ''', """ 被它们括起来的内容都是字符串 
			操作:
				1. + 两个字符串拼接, 两边都是字符串才可以
				2. * 重复  "sb" * 5
			
		bool: 布尔, 两个取值范围:True, False
			命题: 真命题, 假命题
			现在的老师是个男的  -> 真命题
			alex很帅  -> 假命题
			
			1 > 3   False
			5 > 1   True
			
			作用: 条件判断
			
			
	9. 注释: 很重要. 不要忽略注释的重要, 方便别人, 也方便自己
		1. 行注释  # 注释的内容 
		2. 块注释. 一次性注释一大段
			'''
			"""
		
	10. 用户交互(input)
		可以让我们的程序和人有一定的交互. 
		input获取到的数据是字符串类型
		想要计算必须转化成int()
		
	11. if语句流程控制
		语法1:
			if 条件判断:
				if-语句块
			
			执行流程:
				判断条件是否为真. 如果真, 则执行if-语句块
				否则什么都不执行
			
				
		语法2:
			if 条件判断:
				if-语句块
			else:
				else-语句块
				
			执行流程:
				判断条件是否为真, 如果真, 则执行if-语句块, 否则, 执行else-语句块
		
		语法3: 
			if 条件判断:
				if-语句块
			elif 条件判断2:
				elif-01 语句块
			elif 条件判断3:
				elif-02 语句块
			elif 条件判断4:
				elif-03 语句块
			....
			
			else:
				el语句快
				
			执行流程:
				判断条件是否为真, 如果真, 执行if-语句块, 否则,如果条件判断2为真, 则执行elif-01 语句块, 否则,如果条件判断3为真, 则执行elif-02 语句块, 最后最后else: 以上条件都不成立的时候执行else
		
		语法4: 
			if语句可以互相嵌套. 可以无限的嵌套. 但是一般写程序不要超过5层
		
			
	12. while循环
		可以反复的执行同一段代码
		
		while 条件判断:
			循环体
			
		执行流程:
			判断条件是否为真, 如果真, 则执行循环体. 再次判断条件是否为真. 如果真继续执行循环体. 直到...条件为假. 循环结束 
			
		break	: 彻底终止循环. 跳出循环
		continue: 停止当前本次循环. 继续执行下一次循环 
	
		
	预习:
		运算符
		字符串(重点, 难点)
		列表(list)
		元组(tuple)
		字典(dict)
		集合(set)
		
	